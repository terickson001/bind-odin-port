package lex

import "../common"
import hs "../hide_set"

Token :: struct
{
    next: ^Token,
    kind: Token_Kind,
    text: string,
    first_on_line: bool,
    value: Value,
    whitespace: int,
    using location: common.File_Location,
    
    from: ^Token,           // Token that led to this one
    first_from: bool,       // First token in replacement?
    hide_set: ^hs.Hide_Set, // Set of macros that should not be expanded
    include_idx: int,       // Solution for #include_next
}

Value :: struct
{
    size: u8,
    base: u8,
    sig_figs: u8,
    unsigned: b8,
    is_char: b8,
    
    val: union
    {
        u64,
        f64,
        string,
    },
}

clone_token :: proc(token: ^Token, allocator := context.allocator) -> ^Token
{
    ret := new_clone(token^);
    ret.next = nil;
    return ret;
}

#assert(int(Token_Kind.__KEYWORD_END) == len(TOKEN_STRINGS)-1);
Token_Kind :: enum
{
    Invalid,
    EOF,
    Comment,
    Paste,
    Charize,
    At,
    
    // Literal
    Ident,
    Integer,
    Float,
    Char,
    Wchar,
    String,
    
    // Operators
    Not,
    Question,
    Xor,
    Add,
    Inc,
    Sub,
    Dec,
    Mul,
    Quo,
    Mod,
    BitAnd,
    BitOr,
    BitNot,
    Shl,
    Shr,
    And,
    Or,
    CmpEq,
    NotEq,
    Lt,
    Gt,
    LtEq,
    GtEq,
    Eq,
    AddEq,
    SubEq,
    MulEq,
    QuoEq,
    ModEq,
    AndEq,
    XorEq,
    OrEq,
    ShlEq,
    ShrEq,
    OpenParen,
    CloseParen,
    OpenBracket,
    CloseBracket,
    OpenBrace,
    CloseBrace,
    Colon,
    Semicolon,
    Period,
    ArrowRight,
    Comma,
    Ellipsis,
    BackSlash,
    Hash,
    
    // Keywords
    _signed,
    _unsigned,
    _short,
    _long,
    _int,
    _char,
    ___int8,
    ___int16,
    ___int32,
    ___int64,
    _float,
    _double,
    ___ptr32,
    ___ptr64,
    _typedef,
    _if,
    _else,
    _for,
    _switch,
    _do,
    _while,
    _case,
    _break,
    _continue,
    _return,
    _struct,
    _union,
    _enum,
    _static,
    _extern,
    _goto,
    _const,
    _sizeof,
    __Alignof,
    _volatile,
    _register,
    _inline,
    ___inline__,
    ___inline,
    ___forceinline,
    ___attribute__,
    ___alignof__,
    ___restrict,
    ___extension__,
    ___asm__,
    ___pragma,
    __Pragma,
    ___cdecl,
    ___clrcall,
    ___stdcall,
    ___fastcall,
    ___thiscall,
    ___vectorcall,
    ___declspec,
    ___unaligned,
    _static_assert,
    __Noreturn,
    
    __OPERATOR_BEGIN = Not,
    __OPERATOR_END   = Hash,
    __ASSIGN_BEGIN   = Eq,
    __ASSIGN_END     = XorEq,
    __COMPARE_BEGIN  = CmpEq,
    __COMPARE_END    = GtEq,
    
    __KEYWORD_BEGIN  = _signed,
    __KEYWORD_END    = __Noreturn,
}

TOKEN_STRINGS := [?]string{
    "Invalid",
    "EOF",
    "Comment",
    "##",
    "#@",
    "@",
    
    "identifier",
    "integer",
    "float",
    "char",
    "wchar",
    "string",
    
    "!",
    "?",
    "^",
    "+",
    "++",
    "-",
    "--",
    "*",
    "/",
    "%",
    "&",
    "|",
    "~",
    "<<",
    ">>",
    "&&",
    "||",
    "==",
    "!=",
    "<",
    ">",
    "<=",
    ">=",
    "=",
    "+=",
    "-=",
    "*=",
    "/=",
    "%=",
    "&=",
    "^=",
    "|=",
    "<<=",
    ">>=",
    "(",
    ")",
    "[",
    "]",
    "{",
    "}",
    ":",
    ";",
    ".",
    "->",
    ",",
    "...",
    "\\",
    "#",
    "signed",
    "unsigned",
    "short",
    "long",
    "int",
    "char",
    "__int8",
    "__int16",
    "__int32",
    "__int64",
    "float",
    "double",
    "__ptr32",
    "__ptr64",
    "typedef",
    "if",
    "else",
    "for",
    "switch",
    "do",
    "while",
    "case",
    "break",
    "continue",
    "return",
    "struct",
    "union",
    "enum",
    "static",
    "extern",
    "goto",
    "const",
    "sizeof",
    "_Alignof",
    "volatile",
    "register",
    "inline",
    "__inline__",
    "__inline",
    "__forceinline",
    "__attribute__",
    "___alignof__",
    "__restrict",
    "__extension__",
    "__asm__",
    "__pragma",
    "_Pragma",
    "__cdecl",
    "__clrcall",
    "__stdcall",
    "__fastcall",
    "__thiscall",
    "__vectorcall",
    "__declspec",
    "__unaligned",
    "static_assert",
    "_Noreturn",
};
